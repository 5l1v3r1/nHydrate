<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="wizard1.HeaderImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>