//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;

namespace PROJECTNAMESPACE
{
    /// <summary />
    internal class InstallSettings
    {
        /// <summary />
        public string PrimaryServer { get; set; }

        /// <summary />
        public string PrimaryDatabase { get; set; }

        /// <summary />
        public string PrimaryUserName { get; set; }

        /// <summary />
        public string PrimarySecurityPhrase { get; set; }

        /// <summary />
        public InstallSettings()
        {
            this.IsLoaded = false;
        }

        /// <summary />
        public bool IsLoaded { get; private set; }

        /// <summary />
        public bool Load()
        {
            var fi = new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location);
            fi = new FileInfo(Path.Combine(fi.DirectoryName, "installsettings.xml"));
            if (!fi.Exists) return false;

            var document = new XmlDocument();
            document.Load(fi.FullName);

            var node = document.DocumentElement.SelectSingleNode("primary");
            this.PrimaryServer = XmlHelper.GetNodeValue(node, "server", string.Empty);

            var v = XmlHelper.GetNodeValue(node, "username-encrypted", string.Empty).Decrypt();
            if (!string.IsNullOrEmpty(v))
                this.PrimaryUserName = v;

            v = XmlHelper.GetNodeValue(node, "password-encrypted", string.Empty).Decrypt();
            if (!string.IsNullOrEmpty(v))
                this.PrimarySecurityPhrase = v;

            this.PrimaryDatabase = XmlHelper.GetNodeValue(node, "database", string.Empty);

            this.IsLoaded = true;
            return true;

        }

        public void Kill()
        {
            var fi = new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location);
            fi = new FileInfo(Path.Combine(fi.DirectoryName, "installsettings.xml"));
            if (fi.Exists) fi.Delete();
            System.Threading.Thread.Sleep(500);
        }

        /// <summary />
        public bool Save()
        {
            var fi = new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location);
            fi = new FileInfo(Path.Combine(fi.DirectoryName, "installsettings.xml"));
            if (fi.Exists) fi.Delete();
            System.Threading.Thread.Sleep(500);

            var document = new XmlDocument();
            document.LoadXml("<settings></settings>");

            var node = XmlHelper.AddElement(document.DocumentElement, "primary", string.Empty) as XmlElement;
            XmlHelper.AddElement(node, "server", this.PrimaryServer);
            XmlHelper.AddElement(node, "username-encrypted", (this.PrimaryUserName + string.Empty).Encrypt());
            XmlHelper.AddElement(node, "password-encrypted", (this.PrimarySecurityPhrase + string.Empty).Encrypt());
            XmlHelper.AddElement(node, "database", this.PrimaryDatabase);

            document.Save(fi.FullName);

            return true;

        }

        /// <summary />
        public string GetPrimaryConnectionString()
        {
            return $"User ID={this.PrimaryUserName};Password={this.PrimarySecurityPhrase};Host={this.PrimaryServer};Database={this.PrimaryDatabase};";
        }

    }
}
